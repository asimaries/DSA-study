{
	// Place your snippets for cpp here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	"CPP": {
		"prefix": "u",
		"body": [
			"#include <bits/stdc++.h>",
			"using namespace std;",
			"",
			"#define endl '\\n'",
			"#define space ' '",
			"#define dbg(x) printf(\"%s = %d\\n\", #x, x);",
			"#define all(x) (x).begin(), (x).end()",
			"template <typename T> void printarr(vector<T> &a){ cout << \"\\n[ \"; for (auto i : a) cout << i << ' '; cout << \"]\\n\"; }",

			"typedef long long ll;",
			// "#define allr(x) (x).rbegin(),(x).rend()",
			"// const int mod = 1e9+7;",
			"inline void solve();",
			"",
			"int32_t main()",
			"{",
			"#ifndef ONLINE_JUDGE",
			"    freopen(\"in.in\", \"r\", stdin);",
			"    freopen(\"out.in\", \"w\", stdout);",
			"#endif",
			//   "    ios_base::sync_with_stdio(false);",
			//   "    cin.tie(NULL);",
			//   "    cout.tie(NULL);",
			"",
			"    int t;",
			"    // scanf(\"%d\", &t); while (t--)",
			"    {",
			"        solve();",
			"    }",
			"    return 0;",
			"}",
			"/*************************************/",
			"",
			"",
			"inline void solve()",
			"{",
			"    $1",
			"}",
			""
		],
		"description": "CPP"
	},
	"debug": {
		"prefix": "dbg",
		"body": [
			"dbg($1)"
		],
		"description": "debug"
	},
	"allIterator": {
		"prefix": "all",
		"body": [
			"all($1)"
		],
		"description": "allIterator"
	},
	"length": {
		"prefix": "len",
		"body": [
			"length()"
		],
		"description": "length"
	}
}