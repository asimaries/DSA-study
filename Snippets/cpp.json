{
    "CPP": {
        "prefix": "u",
        "body": [
            "#include <bits/stdc++.h>",
            "using namespace std;",
            "",
            "#define int long long",
            "const int INF = 1000000000;",
            "const int mod = 1000000007;",
            "#define endl '\\n'",
            "#define sz(x) (int)(x).size()",
            "#define gri greater<int>()",
            "#define all(x) (x).begin(), (x).end()",
            "#define inarr(x) for (auto &i : x) cin >> i;",
            "#define printarr(x) for (auto &i : x) cout << i << ' ';",
            "bool pv(const pair<int, int> &a, const pair<int, int> &b)",
            "{",
            "    return a.first > b.first;",
            "    return a.second < b.second;",
            "}",
            "/*------------ASIMARIES------------*/",
            "void solve();",
            "signed main()",
            "{",
            "#ifndef ONLINE_JUDGE",
            "    freopen(\"in.in\", \"r\", stdin);",
            "    freopen(\"out.in\", \"w\", stdout);",
            "#endif",
            "cout << fixed << setprecision(6);",
            "",
            "    int t = 1;",
            "    cin >> t;",
            "    while (t--)",
            "    {",
            "        solve();",
            "        cout << endl;",
            "    }",
            "    return 0;",
            "}",
            "",
            "",
            "",
            "void solve()",
            "{",
            "    $1",
            "}",
            ""
        ],
        "description": "CPP"
    },
    "CPPsmall": {
        "prefix": "ui",
        "body": [
            "#include <bits/stdc++.h>",
            "using namespace std;",
            "",
            "signed main()",
            "{",
            "    $1",
            "    return 0;",
            "}"
        ],
        "description": "CPP"
    },
    "debug": {
        "prefix": "debug",
        "body": ["debug($1);"],
        "description": "debug"
    },
    "vector": {
        "prefix": "vec",
        "body": ["vector<$1> ();"],
        "description": "vector<>"
    },
    "vector<int>": {
        "prefix": "vi",
        "body": ["vector<int> $1($2);"],
        "description": "vector<int>"
    },
    "set": {
        "prefix": "st",
        "body": ["set<$1> st;"],
        "description": "set<>"
    },
    "map": {
        "prefix": "mp",
        "body": ["map<$1, $2> mp;"],
        "description": "map<>"
    },
    "unordered_set": {
        "prefix": "ust",
        "body": ["unordered_set<$1> st;"],
        "description": "unordered_set<>"
    },
    "unordered_map": {
        "prefix": "ump",
        "body": ["unordered_map<$1, $2> mp;"],
        "description": "unordered_map<>"
    },
    "pair": {
        "prefix": "pr",
        "body": ["pair<$1, $2> ;"],
        "description": "pair<>"
    },
    "pair<int, int>": {
        "prefix": "pii",
        "body": ["pair<int, int> $1;"],
        "description": "pair<int, int>"
    },
    "stack": {
        "prefix": "stk",
        "body": ["stack<$1> stk;"],
        "description": "stack<>"
    },
    "queue": {
        "prefix": "qu",
        "body": ["queue<$1> q;"],
        "description": "queue<>"
    },
    "deque": {
        "prefix": "dq",
        "body": ["deque<$1> dq;"],
        "description": "deque<>"
    },
    "priority_queue": {
        "prefix": "pq",
        "body": ["priority_queue<$1, vector<$1>, greater<$1>> pq;"],
        "description": "priority_queue<>"
    },
    "sort": {
        "prefix": "sor",
        "body": ["sort(all($1));"],
        "description": "sort()"
    },
    "Node": {
        "prefix": "node",
        "body": ["Node *"],
        "description": "Node *"
    },
    "vector<vector<T>>": {
        "prefix": "vvec",
        "body": ["vector<vector<$1>> $2($3, vector<$1>($4));"],
        "description": "vector<vector<>>"
    },
    "vector<vector<int>>": {
        "prefix": "vvi",
        "body": ["vector<vector<int>> $1($2, vector<int>($3));"],
        "description": "vector<vector<int>>"
    },
    "TESTCASES": {
        "prefix": "test",
        "body": ["int t = 1;", "cin >> t;", "while (t--)", "{", "    $1", "}"],
        "description": "TESTCASES"
    },
    "SIEVE OF ERATOSTHENES": {
        "prefix": "SIEVE",
        "body": [
            "void __sieve(int n = 1000000)",
            "{",
            "    vector<bool> __PRIME;",
            "    __PRIME.resize(n + 1, true);",
            "    __PRIME[0] = __PRIME[1] = 0;",
            "    int sqtn = sqrt(n);",
            "    for (int p = 2; p <= sqtn; ++p)",
            "        if (__PRIME[p])",
            "            for (int i = p * p; i <= n; i += p)",
            "                __PRIME[i] = false;",
            "",
            "    // vector<int> prime = {2};",
            "    // for (int i = 3; i < __PRIME.size(); i+=2)",
            "    //     if (__PRIME[i])",
            "    //         prime.emplace_back(i);",
            "    return;",
            "}"
        ],
        "description": "SIEVE OF ERATOSTHENES"
    },
    "DEBUG": {
        "prefix": "DEBUGGER",
        "body": [
            "#define debug(x)                    \\",
            "    cerr << #x << \" = \", _print(x); \\",
            "    cerr << endl;",
            "void _print(int t) { cerr << t; }",
            "void _print(string t) { cerr << t; }",
            "void _print(char t) { cerr << t; }",
            "void _print(double t) { cerr << t; }",
            "template <class T, class V>",
            "void _print(pair<T, V> p);",
            "template <class T>",
            "void _print(vector<T> v);",
            "template <class T>",
            "void _print(set<T> v);",
            "template <class T, class V>",
            "void _print(map<T, V> v);",
            "template <class T>",
            "void _print(unordered_set<T> v);",
            "template <class T, class V>",
            "void _print(unordered_map<T, V> v);",
            "template <class T>",
            "void _print(multiset<T> v);",
            "template <class T, class V>",
            "void _print(pair<T, V> p) { cerr << \"{\", _print(p.first), cerr << \" ,\", _print(p.second), cerr << \"}\\n\"; }",
            "template <class T>",
            "void _print(vector<T> v)",
            "{",
            "    cerr << \"[ \";",
            "    for (T i : v)",
            "        _print(i), cerr << \" \";",
            "    cerr << \"]\\n\";",
            "}",
            "template <class T>",
            "void _print(set<T> v)",
            "{",
            "    cerr << \"[ \";",
            "    for (T i : v)",
            "        _print(i), cerr << \" \";",
            "    cerr << \"]\\n\";",
            "}",
            "template <class T>",
            "void _print(unordered_set<T> v)",
            "{",
            "    cerr << \"[ \";",
            "    for (T i : v)",
            "        _print(i), cerr << \" \";",
            "    cerr << \"]\\n\";",
            "}",
            "template <class T>",
            "void _print(multiset<T> v)",
            "{",
            "    cerr << \"[ \";",
            "    for (T i : v)",
            "        _print(i), cerr << \" \";",
            "    cerr << \"]\\n\";",
            "}",
            "template <class T, class V>",
            "void _print(map<T, V> v)",
            "{",
            "    cerr << \"[\\n\";",
            "    for (auto i : v)",
            "        _print(i), cerr << \"\\n\";",
            "    cerr << \"]\\n\";",
            "}",
            "template <class T, class V>",
            "void _print(unordered_map<T, V> v)",
            "{",
            "    cerr << \"[\\n\";",
            "    for (auto i : v)",
            "        _print(i), cerr << \"\\n\";",
            "    cerr << \"]\\n\";",
            "}",
            "/*************************************/"
        ],
        "description": "DEBUGGER"
    },
    "DIVISORS": {
        "prefix": "DIVISORS",
        "body": [
            "vector<int> getDIVISORS(int n)",
            "{",
            "    vector<int> ans;",
            "    int sqt = sqrt(n);",
            "    for (int i = 1; i <= sqt; i++)",
            "        if (n % i == 0)",
            "            if (n / i == i)",
            "                ans.emplace_back(i);",
            "            else",
            "                ans.emplace_back(n / i);",
            "",
            "    return ans;",
            "}"
        ],
        "description": "DIVISORS"
    },
    "Extended Euclid": {
        "prefix": "exEuclid",
        "body": [
            "class Triplet",
            "{",
            "public:",
            "    int x, y, gcd;",
            "    Triplet(int _x, int _y, int _gcd) { x = _x, y = _y, gcd = _gcd; }",
            "};",
            "Triplet exEuclid(int a, int b)",
            "{",
            "    if (b == 0)",
            "    {",
            "        Triplet ans(1, 0, a);",
            "        return ans;",
            "    }",
            "    Triplet dash = exEuclid(b, a % b);",
            "    Triplet ans(dash.y, (dash.x - ((a / b) * dash.y)), dash.gcd);",
            "    return ans;",
            "}",
            "int modInverse(int a, int m)",
            "{",
            "    int x = exEuclid(a, m).x;",
            "    return (x % m + m) % m;",
            "}",
            ""
        ],
        "description": "Extended Euclid"
    },
    "PBDS": {
        "prefix": "pbds",
        "body": [
            "#include <ext/pb_ds/assoc_container.hpp>",
            "#include <ext/pb_ds/tree_policy.hpp>",
            "using namespace __gnu_pbds;",
            "typedef tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> PBDS;"
        ],
        "description": "Ordered Set"
    },
    "INPUT": {
        "prefix": "inout",
        "body": [
            "#ifndef ONLINE_JUDGE",
            "    freopen(\"in.in\", \"r\", stdin);",
            "    freopen(\"out.in\", \"w\", stdout);",
            "#endif"
        ],
        "description": "INPUT"
    }
}
